name: CertVault Backend Deploy

on:
  push:
    branches:
      - dev
    paths:
      - server/**
  workflow_dispatch:
#  release:
#    types:
#      - created

env:
#  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 JDK 环境
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 移出前端文件
      - name: Move files out
        run: mv frontend/* . && rm -r frontend

      # 设置 pnpm 环境
      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/Jod
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      # 构建前端项目
      - name: Build Frontend
        run: |
          pnpm install
          pnpm run build
          mkdir -p server/src/main/resources/static
          cp -r dist/* server/src/main/resources/static/

      # 使用 Maven 打包后端项目
      - name: Build with Maven
        run: mvn clean package -f server/pom.xml -DskipTests

      # 获取 Maven 版本并设置为环境变量
      - name: Get Maven version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout -f server/pom.xml)" >> $GITHUB_ENV

      # 修改 Chart.yaml 文件中的版本字段
      - name: Update Chart.yaml version
        run: |
          sed -i "s/version: 0.0.0/version: ${{ env.VERSION }}/" server/helm/charts/cert-vault/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: \"${{ env.VERSION }}\"/" server/helm/charts/cert-vault/Chart.yaml

      # 登录到 GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 构建 Docker 镜像
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.VERSION }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: server/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate OpenAPI Documentation
        run: |       # 启动应用并导出 YAML 格式文档
          java -jar server/target/*.jar --spring.profiles.active=ci &
          sleep 20
          curl http://localhost:1888/api/docs.yaml > openapi.yaml

      - name: Set up environment variable
        run: echo "VERSION=${{ env.VERSION }}" > version.env

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.env

      - name: Upload API Doc Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-doc
          path: openapi.yaml

  deploy-helm:
    runs-on: ubuntu-latest
    needs: build-backend
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: version
          path: .

      - name: Read environment variable
        run: |
          source version.env
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "The value of VERSION is: ${{ env.VERSION }}"

      # 检出当前代码库
      - name: Checkout code
        uses: actions/checkout@v4

      # 检出目标仓库代码
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: gregPerlinLi/certvault-charts
          token: ${{ secrets.CERT_VAULT_CHARTS_TOKEN }}
          path: certvault-charts
          ref: main

      # 配置 Git 用户信息
      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 复制 Helm 目录到目标仓库
      - name: Copy Helm directory to target repository
        run: |
          rm -rf certvault-charts/charts certvault-charts/.github
          cp -r server/helm/* certvault-charts/
          cp -r server/helm/.github certvault-charts/
          sed -i "s/@project.version@/${{ env.VERSION }}/g" server/helm/charts/cert-vault/README.md
          cp server/helm/charts/cert-vault/README.md certvault-charts/README.md
          sed -i "s/version: 0.0.0/version: ${{ env.VERSION }}/" certvault-charts/charts/cert-vault/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: \"${{ env.VERSION }}\"/" certvault-charts/charts/cert-vault/Chart.yaml

      # 提交并推送到目标仓库的 main 分支
      - name: Commit and push to target repository
        run: |
          cd certvault-charts
          git add .
          git commit -m "${{ github.event.head_commit.message }}" || echo "No changes to commit"
          git push origin main

  publish-api-doc:
    runs-on: ubuntu-latest
    needs: build-backend
    permissions:
      contents: write
    steps:
      # 下载生成的 OpenAPI 文档
      - name: Download OpenAPI artifact
        uses: actions/download-artifact@v4
        with:
          name: openapi-doc
          path: .

      # 检出 CertVaultAPIDoc 仓库
      - name: Checkout CertVaultAPIDoc repo
        uses: actions/checkout@v4
        with:
          repository: gregPerlinLi/certvault-api-doc
          token: ${{ secrets.CERT_VAULT_API_DOC_TOKEN }}
          path: certvault-api-doc
          ref: main

      # 替换并提交 OpenAPI 文档
      - name: Update OpenAPI file
        run: |          
          cp ./openapi.yaml certvault-api-doc/
          cd certvault-api-doc
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add openapi.yaml
          git commit -m "Update OpenAPI documentation" || echo "No changes to commit"
          cd ..

      # 推送变更到 CertVaultAPIDoc
      - name: Push changes to CertVaultAPIDoc
        run: |          
          cd certvault-api-doc
          git push origin main